# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 80, burnin = 40, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
install.packages("~/Bitbucket-repos/Insilico/InsilicoVA_1.0.tar.gz", type = "source", repos = NULL)
library(InsilicoVA)
# use Karonga data for example
data <- read.csv("~/Dropbox/va_clara/InsilicoVA/Inputs_26_04_2014/ART_status/alpha8_interva4_input_karonga.csv")
dim(data)
# example for subpopulation
subpop <- data[, 248]
summary(subpop)
# interVA input of data
data <- data[, 1:246]
# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 80, burnin = 40, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
.Platform$OS.type == "unix"
.jnew( "java/awt/Point", 10L, 10L )
library(rjava)
library(rJava)
.jnew( "java/awt/Point", 10L, 10L )
,jinit()
,.jinit()
.jinit()
.jnew( "java/awt/Point", 10L, 10L )
f <- .jnew("java/awt/Frame","Hello")
component <- .jnull()
component <- .jcast(component, new.class = "java/awt/Component")
message <- .jnew("java/lang/String","This is a JOptionPane test from rJava.")
message <- .jcast(message, new.class = "java/lang/Object")
title <- .jnew("java/lang/String","Test")
type <- .jnew("java/lang/Integer", as.integer(2))
f <- .jnew("javax/swing/JOptionPane")
.jcall(f,,"showMessageDialog", component, message, title, .jsimplify(type))
remove(list = ls())
component <- .jnull()
component <- .jcast(component, new.class = "java/awt/Component")
message <- .jnew("java/lang/String","This is a JOptionPane test from rJava.")
message <- .jcast(message, new.class = "java/lang/Object")
title <- .jnew("java/lang/String","Test")
type <- .jnew("java/lang/Integer", as.integer(2))
f <- .jnew("javax/swing/JOptionPane")
.jcall(f,,"showMessageDialog", component, message, title, .jsimplify(type))
.jcall("java/lang/System", "S", "getProperty", "java.vm.version")
.jcall("java/lang/System", "S", "getProperty", "java.vm.name")
.jcall("java/lang/System", "S", "getProperty", "java.vm.info")
.jcall("java/lang/System", "S", "getProperty", "java.runtime.version")
.jcall("java/lang/System", "S", "getProperty", "sun.arch.data.model")
.jcall("java/lang/System", "S", "getProperty", "java.vm.info")
.jcall("java/lang/System", "S", "getProperty", "java.awt.headless")
Sys.getenv("NOAWT")
.jcall("java/lang/System", "S", "getProperty", "java.awt.headless")
install.packages("~/Bitbucket-repos/Insilico/InsilicoVA_1.0.tar.gz", type = "source", repos = NULL)
library(InsilicoVA)
# use Karonga data for example
data <- read.csv("~/Dropbox/va_clara/InsilicoVA/Inputs_26_04_2014/ART_status/alpha8_interva4_input_karonga.csv")
dim(data)
# example for subpopulation
subpop <- data[, 248]
summary(subpop)
# interVA input of data
data <- data[, 1:246]
# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 80, burnin = 40, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
Sys.setenv(NOAWT=0)
# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 80, burnin = 40, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
.Platform$OS.type == "unix"
as.integer(.Platform$OS.type == "unix")
as.integer(.Platform$OS.type == "windows")
install.packages("~/Bitbucket-repos/Insilico/InsilicoVA_1.0.tar.gz", type = "source", repos = NULL)
library(InsilicoVA)
# use Karonga data for example
data <- read.csv("~/Dropbox/va_clara/InsilicoVA/Inputs_26_04_2014/ART_status/alpha8_interva4_input_karonga.csv")
dim(data)
# example for subpopulation
subpop <- data[, 248]
summary(subpop)
# interVA input of data
data <- data[, 1:246]
# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 80, burnin = 40, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
install.packages("~/Bitbucket-repos/Insilico/InsilicoVA_1.0.tar.gz", type = "source", repos = NULL)
library(InsilicoVA)
# use Karonga data for example
data <- read.csv("~/Dropbox/va_clara/InsilicoVA/Inputs_26_04_2014/ART_status/alpha8_interva4_input_karonga.csv")
dim(data)
# example for subpopulation
subpop <- data[, 248]
summary(subpop)
# interVA input of data
data <- data[, 1:246]
# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 80, burnin = 40, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
debug(insilico)
install.packages("~/Bitbucket-repos/Insilico/InsilicoVA_1.0.tar.gz", type = "source", repos = NULL)
library(InsilicoVA)
# use Karonga data for example
data <- read.csv("~/Dropbox/va_clara/InsilicoVA/Inputs_26_04_2014/ART_status/alpha8_interva4_input_karonga.csv")
dim(data)
# example for subpopulation
subpop <- data[, 248]
summary(subpop)
# interVA input of data
data <- data[, 1:246]
# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 80, burnin = 40, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
isUnix
ins <- .jcall(obj, "[[D", "Fit", N.j, S.j, C.j, N_sub.j,
N_level.j, probbase.j, probbase_order.j, level_values.j,
prior_a.j, prior_b.j, jumprange.j, trunc_min.j, trunc_max.j,
indic.j, subpop.j, contains_missing.j, pool.j, seed.j,
N_gibbs.j, burn.j, thin.j, mu.j, sigma2.j, isUnix)
quit()
q
install.packages("~/Bitbucket-repos/Insilico/InsilicoVA_1.0.tar.gz", type = "source", repos = NULL)
library(InsilicoVA)
# use Karonga data for example
data <- read.csv("~/Dropbox/va_clara/InsilicoVA/Inputs_26_04_2014/ART_status/alpha8_interva4_input_karonga.csv")
dim(data)
# example for subpopulation
subpop <- data[, 248]
summary(subpop)
# interVA input of data
data <- data[, 1:246]
# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 4000, burnin = 2000, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
install.packages("~/Dropbox/VA/Richard/InsilicoVA_1.0.tar.gz", type = "source", repos = NULL)
# install.packages("~/Bitbucket-repos/Insilico/InsilicoVA_1.0.tar.gz", type = "source", repos = NULL)
library(InSilicoVA)
# use Karonga data for example
data <- read.csv("~/Dropbox/va_clara/InsilicoVA/Inputs_26_04_2014/ART_status/alpha8_interva4_input_karonga.csv")
dim(data)
# example for subpopulation
subpop <- data[, 248]
summary(subpop)
# interVA input of data
data <- data[, 1:246]
# run without subpopulation
fit<- insilico( data, subpop = NULL, HIV = "h", Malaria = "h", method = "normal",
length.sim = 400, burnin = 200, thin = 10 ,
useInterVA = 1, external.sep = TRUE, keepProbbase.level = TRUE)
# get individual probability (# of death by # of Cause matrix)
out <- report(fit)
1+1
install.packages("InSilicoVA")
setRepositories()
install.packages("InSilicoVA")
ap <- available.packages()
"InSilicoVA" %in% ap
View(ap)
"InterVA4" %in% ap
install.packages("InSilicoVA")
install.packages("InSilicoVA", method = "curl")
ap["foobarbaz", "Depends"]
library(installr)
updateR()
insta..
insta.packages("installr")
install.packages("installr")
install.packages("InterVA4")
install.packages("InSilicoVA
")
install.packages("devtools")
getOption("repos")
chooseCRANmirror()
install.packages("InSilicoVA
")
install.packages("InSilicoVA", method = "curl")
install.packages("InSilicoVA")
install.packages("InSilicoVA
")
# test script and all example functions in InSilicoVA package
install.packages("~/Bitbucket-repos/InSilicoVA-beta/InSilicoVA_1.0.tar.gz", repos = NULL, type = "source")
library(InSilicoVA)
# Toy example with 1000 VA deaths
data(RandomVA1)
data(condprobnum)
# The conditional probabilities are given in numerical values in this dataset
condprobnum[1:5, 1:5]
# To modify certain cells
new_cond_prob_num <- condprobnum
new_cond_prob_num["elder", "HIV/AIDS related death"] <- 0.005
# or equivalently
new_cond_prob_num[1, 3] <- 0.005
fit6<- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
CondProbNum = new_cond_prob_num,
auto.length = FALSE)
# note: compare this with fit1 above to see the change induced by changing Pr(elder | HIV) from "C+" to "C".
summary(fit6)
data(condprob)
# The conditional probabilities are given in levels such as I, A+, A, A-, etc.
condprob[1:5, 1:5]
# To modify certain cells
new_cond_prob <- condprob
new_cond_prob["elder", "HIV/AIDS related death"] <- "C"
# or equivalently
new_cond_prob[1, 3] <- "C"
fit5<- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
CondProb = new_cond_prob,
auto.length = FALSE)
# note: compare this with fit1 above to see the change induced by changing Pr(elder | HIV) from "C+" to "C".
summary(fit5)
summary(fit6)
fit4<- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
updateCondProb = FALSE,
auto.length = FALSE)
summary(fit4)
summary(fit6)
data(RandomPhysician)
head(RandomPhysician)
load("~/Desktop/examplefitphy.rda")
fit6 <- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
phy.debias = phydebias,
auto.length = FALSE)
data(SampleCategory)
head(SampleCategory)
fit6 <- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
phy.debias = phydebias,
phy.cat = SampleCategory,
phy.external = "External", phy.unknown = "Unknown"
auto.length = FALSE)
fit6 <- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
phy.debias = phydebias,
phy.cat = SampleCategory,
phy.external = "External", phy.unknown = "Unknown",
auto.length = FALSE)
head(phydebias$code.debias)
TT = data.frame(phydebias$code.debias[, 2:7])
head(TT)
TT = cbind(phydebias$code.debias[, 1], TT)
head(TT)
TT = cbind(ID = phydebias$code.debias[, 1], TT)
head(TT)
TT= TT[, -2]
head(TT)
phydebias$code.debias = TT
fit8 <- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
phy.debias = phydebias,
phy.cat = SampleCategory,
phy.external = "External", phy.unknown = "Unknown",
auto.length = FALSE)
colnames(TT)
TT =TT[, -1]
TT = as.matrix(TT)
class(TT)
head(TT)
colnames(TT)[2] = "TB/AIDS"
ttt = data.frame(TT, check.names=F)
head(ttt)
colnames(phydebias$code.debias)
colnames(phydebias$code.debias)[3] = "TB/AIDS"
fit8 <- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
phy.debias = phydebias,
phy.cat = SampleCategory,
phy.external = "External", phy.unknown = "Unknown",
auto.length = FALSE)
head(phydebias$code.debias)
head(RandomVA[,1:5])
head(RandomVA1[,1:5])
which(colnames(phydebias$phy.code) == phy.external)
which(colnames(phydebias$code.debias) == "External")
debug(insilico)
fit8 <- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
phy.debias = phydebias,
phy.cat = SampleCategory,
phy.external = "External", phy.unknown = "Unknown",
auto.length = FALSE)
debug(insilico.fit)
c
c
c
c
c
dim(phy.code)
dim(phy.code)
dim(phy.code)
head(phy.code)
dim(phy.code)
fit8 <- insilico(RandomVA1, subpop = NULL,
length.sim = 1000, burnin = 500, thin = 10 , seed = 1,
phy.debias = phydebias,
phy.cat = SampleCategory,
phy.external = "External", phy.unknown = "Unknown",
auto.length = FALSE)
c
c
c
c
dim(assignment)
dim(phy.code)
length(matchid)
head(matchid)
te = assignment
te[matchid, ] <-  phy.code[, -1]
dim(te)
length(te)
te[matchid, ] <-  as.matrix(phy.code[, -1])
dim(phy.code)
class(phy.code)
te = assignment
te[matchid, ] <-  as.matrix(phy.code[, -1])
dim(te)
q
Q
q()
source("~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/VerbalAutopsy/R/VAmain.r")
source("~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/VerbalAutopsy/R/VAmain.r")
setwd("~/Dropbox/VA-related/VA-codebase/InterVA4/InterVA4_1.7/R")
setwd(../)
setwd("..")
library(devtools)
document()
build()
setwd("~/")
setwd("~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/Tariff/R")
setwd("..")
document()
setwd("..")
setwd("~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/Tariff/R")
setwd("..")
build()
install.packages("~/Bitbucket-repos/InSilicoVA-beta/InSilicoVA_1.1.tar.gz", repos = NULL, type = "source")
install.packages("~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/Tariff_1.0.tar.gz", repos = NULL, type = "source")
install.packages("~/Dropbox/VA-related/VA-codebase/InterVA4/InterVA4_1.6.tar.gz", repos = NULL, type = "source")
library(InSilicoVA)
library(InterVA4)
library(Tariff)
HIV = "h"
Malaria = "h"
data = RandomVA1
fit <- InterVA(Input = data, HIV = HIV, Malaria = Malaria, replicate = replicate, ...)
fit <- InterVA(Input = data, HIV = HIV, Malaria = Malaria, replicate = replicate, ...)
codeVA(RandomVA1, data.type = "WHO", model = "InterVA", version="4.02", HIV = "h", Malaria = "h")
#' Running automated method on VA data
#'
#' @param data
#' @param data.type
#' @param model
#' @param Nchain
#' @param Nsim
#' @param version
#' @param HIV
#' @param Malaria
#' @param physician
#' @param ...
#'
#' @return
#' @export codeVA
#'
#' @examples
#' \dontrun{
#'
#' }
#'
#'
codeVA <- function(data, data.type = c("WHO", "PHMRC", "customize")[1],
data.train,
model = c("InSilicoVA", "InterVA", "Tariff")[1],
Nchain = 1, Nsim=10000, physician = NULL,
version = "4.02", HIV = "h", Malaria = "h", ...){
args <- as.list(match.call())
# -----------------------------------------------------------------------#
if(model == "InSilicoVA"){
if(is.null(args$burnin)){
burnin <- round(Nsim / 2)
}
if(is.null(args$thin)){
thin <- 1 * (Nsim <= 2000) + 10 *(Nsim > 2000)
}
if(data.type == "WHO"){
fit <- insilico(data, length.sim = Nsim, burnin = burnin, thin = thin, ...)
}else if(data.type == 'PHMRC'){
}else if(data.type == "customize"){
}else{
stop("Error: unknown data type specified")
}
# -----------------------------------------------------------------------#
}else if(model == "InterVA"){
if(version == "4.02"){
replicate = TRUE
}else{
replicate = FALSE
}
if(data.type == "WHO"){
fit <- InterVA(Input = data, HIV = HIV, Malaria = Malaria, replicate = replicate, ...)
}else if(data.type == 'PHMRC'){
}else if(data.type == "customize"){
}else{
stop("Error: unknown data type specified")
}
# -----------------------------------------------------------------------#
}else if(model == "Tariff"){
if(data.type == "WHO"){
fit <- tariff(causes.train = ,
symps.train = ,
symps.test = data,
causes.table = NULL
...)
}else if(data.type == 'PHMRC'){
}else if(data.type == "customize"){
}else{
stop("Error: unknown data type specified")
}
}else{
stop("Error, unknown model specification")
}
return(fit)
}
codeVA(RandomVA1, data.type = "WHO", model = "InterVA", version="4.02", HIV = "h", Malaria = "h")
source('~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/VerbalAutopsy/R/VAmain.r')
source('~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/VerbalAutopsy/R/VAmain.r')
source('~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/VerbalAutopsy/R/VAmain.r')
codeVA(RandomVA1, data.type = "WHO", model = "InterVA", version="4.02", HIV = "h", Malaria = "h")
data(causetext)
causetext
source('~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/VerbalAutopsy/R/VAmain.r')
data(RandomVA3)
tariff1 <- codeVA(RandomVA3, data.type = "customize", model = "Tariff",
n.bootstrap = 500)
test <- RandomVA3$test
train <- RandomVA3$train
tariff1 <- codeVA(data = test, data.type = "customize", model = "Tariff",
data.train = train)
data(RandomVA3)
test <- RandomVA3$test
train <- RandomVA3$train
tariff1 <- codeVA(data = test, data.type = "customize", model = "Tariff",
data.train = train, causes.train = "cause")
interva1 <- codeVA(RandomVA1, data.type = "WHO", model = "InterVA",
version = "4.02", HIV = "h", Malaria = "l")
summary(interva1)
summary(tariff1)
plot(interva1)
CSMF(interva1)
class(interva1)
plotVA <- function(object, top, ...){
if(class(object) == "interVA"){
csmf <- CSMF(object, top.plot = top)
}else if(class(object) == "tariff"){
}else if(class(object) == "insilico"){
}else{
stop("Unknown object to plot")
}
}
plotVA(interva1, top = 5)
plotVA(interva1, top = 10)
plotVA <- function(object, top = 10, ...){
if(class(object) == "interVA"){
csmf <- CSMF(object, top.plot = top)
}else if(class(object) == "tariff"){
plot(object, top = top)
}else if(class(object) == "insilico"){
}else{
stop("Unknown object to plot")
}
}
plotVA(tariff1)
insilico1 <- codeVA(RandomVA1, data.type = "WHO", model = "InSilicoVA",
Nchain = 1, Nsim=1000)
source('~/Dropbox/VA-related/VA-codebase/VerbalAutopsy-git/VerbalAutopsy/R/VAmain.r')
insilico1 <- codeVA(RandomVA1, data.type = "WHO", model = "InSilicoVA",
Nchain = 1, Nsim=1000)
summary(insilico1)
summary(insilico1, top = 5)
plotVA(insilico1, title = "InSilicoVA")
plotVA <- function(object, top = 10, title = NULL, ...){
if(class(object) == "interVA"){
csmf <- CSMF(object, top.plot = top, main = title, ...)
}else if(class(object) == "tariff"){
plot(object, top = top, main = title, ...)
}else if(class(object) == "insilico"){
plot(object, top = top, title = title, ...)
}else{
stop("Unknown object to plot")
}
}
plotVA(insilico1, title = "InSilicoVA")
summary(interva1, top = 5)
install.packages("~/Dropbox/VA-related/VA-codebase/InterVA4/InterVA4_1.7.tar.gz", repos = NULL, type = "source")
<<code10-4, results="hide", eval=TRUE, out.width='.49\\linewidth', fig.width = 6, fig.height = 3, fig.cap=" Upper left: top 10 causes with highest CSMFs by InterVA. Upper right: top 5 causes with highest CSMFs by Tariff. Bottom: top 5 causes with highest CSMFs by InSilicoVA.", fig.pos="!h">>=
setwd("~/Dropbox/VA-related/VA-codebase/InterVA4/InterVA4_1.7/R")
setwd("..")
document()
library(devtools)
document()
build()
?InterVA
?InterVA4
